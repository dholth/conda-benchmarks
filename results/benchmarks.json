{
    "benchmarks.MemSuite.mem_list": {
        "code": "class MemSuite:\n    def mem_list(self):\n        return [0] * 256",
        "name": "benchmarks.MemSuite.mem_list",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "memory",
        "unit": "bytes",
        "version": "abe86bab484550a681c61d7bb6eb081fbd37eb6d5009eba1df85c935530577b9"
    },
    "benchmarks.TimeCondaPackageHandling.time_cph": {
        "code": "class TimeCondaPackageHandling:\n    def time_cph(self):\n        \"\"\"\n        Extract a bunch of .conda with conda-package-handling\n        \"\"\"\n        base = pathlib.Path(\"/tmp/condas-cph\")\n        base.mkdir(exist_ok=True)\n        for conda in self.condas:\n            stem = conda.stem\n            dest_dir = base / stem\n            dest_dir.mkdir(exist_ok=True)\n            extract(str(conda), dest_dir)\n\n    def setup(self):\n        self.condas = list(\n            pathlib.Path(\"~/miniconda3/pkgs\").expanduser().glob(\"*.conda\")\n        )",
        "min_run_count": 2,
        "name": "benchmarks.TimeCondaPackageHandling.time_cph",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9cc6877844e6f34ca33a015bffe4cbcd86c7b08bec495e60c8e3953de2daa76a",
        "warmup_time": -1
    },
    "benchmarks.TimeCondaPackageHandling.time_cps": {
        "code": "class TimeCondaPackageHandling:\n    def time_cps(self):\n        \"\"\"\n        Extract a bunch of .conda with conda-package-streaming\n        \"\"\"\n        base = pathlib.Path(\"/tmp/condas-cps\")\n        base.mkdir(exist_ok=True)\n        for conda in self.condas:\n            stem = conda.stem\n            dest_dir = base / stem\n            dest_dir.mkdir(exist_ok=True)\n            with conda.open(mode=\"rb\") as fp:\n                for tar, member in package_streaming.stream_conda_component(\n                    str(conda), fp, component=\"info\"\n                ):\n                    tar.extractall(dest_dir)\n                    break\n                for tar, member in package_streaming.stream_conda_component(\n                    str(conda), fp, component=\"pkg\"\n                ):\n                    tar.extractall(dest_dir)\n                    break\n\n    def setup(self):\n        self.condas = list(\n            pathlib.Path(\"~/miniconda3/pkgs\").expanduser().glob(\"*.conda\")\n        )",
        "min_run_count": 2,
        "name": "benchmarks.TimeCondaPackageHandling.time_cps",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "8c9f773249656249171b7bd4345f4c8cab56352253fd4efebe4fa85508da541e",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_keys": {
        "code": "class TimeSuite:\n    def time_keys(self):\n        for key in self.d.keys():\n            pass\n\n    def setup(self):\n        self.d = {}\n        for x in range(500):\n            self.d[x] = None",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_keys",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "86e015a3c40c52da31e4185fff7c7176c38c5e1e1e4aba71912db0b388225191",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_range": {
        "code": "class TimeSuite:\n    def time_range(self):\n        d = self.d\n        for key in range(500):\n            x = d[key]\n\n    def setup(self):\n        self.d = {}\n        for x in range(500):\n            self.d[x] = None",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_range",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "cc3e85248a6284df968bcf8afe866da285261eb2487c10e9dd9e2d17a05deb47",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_values": {
        "code": "class TimeSuite:\n    def time_values(self):\n        for value in self.d.values():\n            pass\n\n    def setup(self):\n        self.d = {}\n        for x in range(500):\n            self.d[x] = None",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_values",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "cace9f2d006aa364dcf5762823afba3680c2fb50179ee30beaf880c0697256e2",
        "warmup_time": -1
    },
    "version": 2
}