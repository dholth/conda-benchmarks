{
    "benchmarks.TrackSuite.track_streaming_versus_handling": {
        "code": "class TrackSuite:\n    def track_streaming_versus_handling(self):\n        \"\"\"\n        Compare conda-package-streaming time versus conda-package-handling (should be a number > 1)\n        \"\"\"\n        attempted = len(self.condas)\n        with TemporaryDirectory(\n            \"conda-package-streaming\"\n        ) as streaming, TemporaryDirectory(\"conda-package-handling\") as handling:\n    \n            # give faster streaming the cache disadvantage\n            begin = time.monotonic()\n            # revise self.condas down to the number extracted in no more than\u0153\n            # MAXIMUM_SECONDS\n            self.condas = extract_streaming(streaming, self.condas)\n            end = time.monotonic()\n            cps_time = end - begin\n    \n            actual = len(self.condas)\n            print(f\"'streaming' extracted {actual} out of {attempted} .conda's\")\n    \n            begin = time.monotonic()\n            self.condas = extract_handling(handling, self.condas, time_limit=cps_time * 4)\n            end = time.monotonic()\n            handling_time = end - begin\n    \n            actual = len(self.condas)\n            print(f\"'handling' extracted {actual} out of {attempted} .conda's\")\n    \n            return handling_time / cps_time\n\n    def setup(self):\n        self.condas = list(\n            pathlib.Path(\"~/miniconda3/pkgs\").expanduser().glob(\"*.conda\")\n        )\n        if len(self.condas) < MINIMUM_PACKAGES:\n            raise NotImplementedError(\"Not enough .conda packages in ~/miniconda3/pkgs\")\n    \n        self.tarbz2 = list(\n            pathlib.Path(\"~/miniconda3/pkgs\").expanduser().glob(\"*.tar.bz2\")\n        )",
        "name": "benchmarks.TrackSuite.track_streaming_versus_handling",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "track",
        "unit": "speedup",
        "version": "6e8338ab5a696ba9bbadb68e4e3e609f6749ee172e4b866673fce21015bfe987"
    },
    "benchmarks.TrackSuite.track_streaming_versus_handling_tarbz2": {
        "code": "class TrackSuite:\n    def track_streaming_versus_handling_tarbz2(self):\n        \"\"\"\n        Compare conda-package-streaming time versus conda-package-handling (should be a number > 1)\n        \"\"\"\n        attempted = len(self.condas)\n        with TemporaryDirectory(\n            \"conda-package-streaming-bz2\"\n        ) as streaming, TemporaryDirectory(\"conda-package-handling-bz2\") as handling:\n    \n            # give faster streaming the cache disadvantage\n            begin = time.monotonic()\n            # revise self.condas down to the number extracted in no more than\u0153\n            # MAXIMUM_SECONDS\n            self.tarbz2 = extract_streaming(streaming, self.tarbz2)\n            end = time.monotonic()\n            cps_time = end - begin\n    \n            actual = len(self.condas)\n            print(f\"'streaming' extracted {actual} out of {attempted} .tar.bz2's\")\n    \n            begin = time.monotonic()\n            self.tarbz2 = extract_handling(handling, self.tarbz2, time_limit=cps_time * 4)\n            end = time.monotonic()\n            handling_time = end - begin\n    \n            actual = len(self.condas)\n            print(f\"'handling' extracted {actual} out of {attempted} .tar.bz2's\")\n    \n            return handling_time / cps_time\n\n    def setup(self):\n        self.condas = list(\n            pathlib.Path(\"~/miniconda3/pkgs\").expanduser().glob(\"*.conda\")\n        )\n        if len(self.condas) < MINIMUM_PACKAGES:\n            raise NotImplementedError(\"Not enough .conda packages in ~/miniconda3/pkgs\")\n    \n        self.tarbz2 = list(\n            pathlib.Path(\"~/miniconda3/pkgs\").expanduser().glob(\"*.tar.bz2\")\n        )",
        "name": "benchmarks.TrackSuite.track_streaming_versus_handling_tarbz2",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "track",
        "unit": "speedup",
        "version": "9b54b125cd259447291efcc848a80203d76981bdad876026a3b877ef3083fe39"
    },
    "download_asyncio.TimeDownloadPackages.time_download_aiohttp": {
        "code": "class TimeDownloadPackages:\n    def time_download_aiohttp(self):\n        asyncio.run(main(self.fixup_urls(), self.temppath))\n\n    def setup(self):\n        self.tempdir = TemporaryDirectory(\"aiohttp\")\n        self.temppath = Path(self.tempdir.name)\n        log.info(\"Download to %s\", self.tempdir)\n        self.server = test_server.run_on_random_port()\n\n    def setup_cache(self):\n        \"\"\"\n        Called once per session.\n        \"\"\"\n        test_server.base.mkdir(parents=True, exist_ok=True)\n        for package in cheap[\"package\"]:\n            name = package[\"url\"].rpartition(\"/\")[-1]\n            if not (test_server.base / name).exists():\n                conda.exports.download(package[\"url\"], test_server.base / name)",
        "min_run_count": 2,
        "name": "download_asyncio.TimeDownloadPackages.time_download_aiohttp",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "download_asyncio:94",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "867910577f383dc87602abe20090a0d99f820be3f51a2d66e7fc6bb95a41ef09",
        "warmup_time": -1
    },
    "download_asyncio.TimeDownloadPackages.time_download_serial": {
        "code": "class TimeDownloadPackages:\n    def time_download_serial(self):\n        # does teardown/setup not run for each function in this class\n        target_base = self.temppath / 's'\n        target_base.mkdir()\n        for package in self.fixup_urls():\n            name = package['url'].rsplit('/', 1)[-1]\n            target = target_base / name\n            assert not target.exists()\n            conda.exports.download(package[\"url\"], target)\n\n    def setup(self):\n        self.tempdir = TemporaryDirectory(\"aiohttp\")\n        self.temppath = Path(self.tempdir.name)\n        log.info(\"Download to %s\", self.tempdir)\n        self.server = test_server.run_on_random_port()\n\n    def setup_cache(self):\n        \"\"\"\n        Called once per session.\n        \"\"\"\n        test_server.base.mkdir(parents=True, exist_ok=True)\n        for package in cheap[\"package\"]:\n            name = package[\"url\"].rpartition(\"/\")[-1]\n            if not (test_server.base / name).exists():\n                conda.exports.download(package[\"url\"], test_server.base / name)",
        "min_run_count": 2,
        "name": "download_asyncio.TimeDownloadPackages.time_download_serial",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "download_asyncio:94",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "ba173f9ff03c4320800e1e0aa782de9b35ae31771d762b19dda51726c9c126e4",
        "warmup_time": -1
    },
    "version": 2
}